// rotation_test.js
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è jsPsych –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
const jsPsych = initJsPsych({
  display_element: 'jspsych-target',
  on_finish: () => {
    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ image-button-response —Ç—Ä—è–π–ª–∞–º
    const all_trials = jsPsych.data.get().filter({trial_type: 'image-button-response'}).values();
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const rows = all_trials.map((trial, idx) => {
      const filename = trial.filename;
      const matchFrag = filename.match(/^(\d+)_/);
      const matchAngle = filename.match(/_(\d+)(?:_R)?\.jpg$/);
      const fragCount = matchFrag ? getFragmentCount(parseInt(matchFrag[1])) : null;
      const angle = matchAngle ? parseInt(matchAngle[1]) : null;
      return {
        '‚Ññ': idx + 1,
        '–§–∞–π–ª': filename,
        '–§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤': fragCount,
        '–£–≥–æ–ª': angle,
        '–¢–∏–ø': filename.includes('_R') ? '–†–∞–∑–Ω—ã–µ' : '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ',
        'RT (–º—Å)': trial.rt,
        '–û—Ç–≤–µ—Ç': trial.response_label,
        '–ü—Ä–∞–≤–∏–ª—å–Ω–æ': trial.correct_trial ? '‚úîÔ∏è' : '‚ùå'

      };
    });
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = {};
    const total = rows.length;
    stats['–¢–æ—á–Ω–æ—Å—Ç—å, %'] = percentCorrect(rows);
    stats['–¢–æ—á–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö, %'] = percentCorrect(rows.filter(r => r['–¢–∏–ø'] === '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ'));
    stats['–¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö, %'] = percentCorrect(rows.filter(r => r['–¢–∏–ø'] === '–†–∞–∑–Ω—ã–µ'));
    // –¢—Ä–µ—Ç–∏
    const third = Math.floor(total/3);
    stats['–ü–µ—Ä–≤–∞—è —Ç—Ä–µ—Ç—å, %'] = percentCorrect(rows.slice(0, third));
    stats['–°–µ—Ä–µ–¥–∏–Ω–∞, %'] = percentCorrect(rows.slice(third, third*2));
    stats['–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ—Ç—å, %'] = percentCorrect(rows.slice(third*2));
    // –°—Ä–µ–¥–Ω–∏–µ RT
    stats['–°—Ä–µ–¥–Ω–µ–µ RT (–º—Å)'] = avgRT(rows);
    stats['–°—Ä–µ–¥–Ω–µ–µ RT –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö'] = avgRT(rows.filter(r => r['–¢–∏–ø'] === '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ'));
    stats['–°—Ä–µ–¥–Ω–µ–µ RT —Ä–∞–∑–Ω—ã—Ö'] = avgRT(rows.filter(r => r['–¢–∏–ø'] === '–†–∞–∑–Ω—ã–µ'));
    stats['–°—Ä–µ–¥–Ω–µ–µ RT 1/3'] = avgRT(rows.slice(0, third));
    stats['–°—Ä–µ–¥–Ω–µ–µ RT 2/3'] = avgRT(rows.slice(third, third*2));
    stats['–°—Ä–µ–¥–Ω–µ–µ RT 3/3'] = avgRT(rows.slice(third*2));
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≥–ª–∞–º
    const angles = [0,50,100,150];
    angles.forEach(angle => {
      const subset = rows.filter(r => r['–£–≥–æ–ª'] === angle);
      stats[`–£–≥–æ–ª ${angle}: –∫–æ–ª-–≤–æ`] = subset.length;
      stats[`–£–≥–æ–ª ${angle}: —Ç–æ—á–Ω–æ—Å—Ç—å, %`] = percentCorrect(subset);
      stats[`–£–≥–æ–ª ${angle}: RT`] = avgRT(subset);
    });
    // –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel: —Å–æ–∑–¥–∞—ë–º –ª–∏—Å—Ç—ã
    const wb = XLSX.utils.book_new();
    const ws1 = XLSX.utils.json_to_sheet(rows);
    XLSX.utils.book_append_sheet(wb, ws1, '–î–∞–Ω–Ω—ã–µ');
    const statRows = Object.entries(stats).map(([k,v])=>({–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:k, –ó–Ω–∞—á–µ–Ω–∏–µ:v}));
    const ws2 = XLSX.utils.json_to_sheet(statRows);
    XLSX.utils.book_append_sheet(wb, ws2, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    // –ò–º—è —Ñ–∞–π–ª–∞
    const now = new Date();
    const ts = now.toLocaleString('ru-RU').replace(/[\s:]/g,'_').replace(/[.,]/g,'-');
    const fname = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã_${ts}.xlsx`;
    XLSX.writeFile(wb, fname);
    jsPsych.data.displayData();
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
function getFragmentCount(number) {
  if ([1,2,3].includes(number)) return 7;
  if ([4,5,6,7,8,9,13,14,15,25,26,27].includes(number)) return 8;
  if ([10,11,12,16,17,18,19,20,21,28,29,30,31,32,33,34,38,39,40].includes(number)) return 9;
  if ([22,23,24,35,36,37,41,42,43,44,45,46].includes(number)) return 10;
  if ([47,48].includes(number)) return 11;
  return null;
}

function percentCorrect(rows) {
  if (!rows.length) return 0;
  const correct = rows.filter(r=>r['–ü—Ä–∞–≤–∏–ª—å–Ω–æ']==='‚úîÔ∏è').length;
  return Math.round((correct/rows.length)*100);
}

function avgRT(rows) {
  if (!rows.length) return 0;
  const sum = rows.reduce((acc,r)=>acc + (r['RT (–º—Å)']||0), 0);
  return Math.round(sum/rows.length);
}

const angles = [0, 50, 100, 150];
const totalTrials = 36;
const trialsPerGroup = 12; // 36 / 3
const correctCount = 18;
const incorrectCount = 18;

// 1. –ù–æ–º–µ—Ä–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
const fragmentGroups = {
  8: [4, 5, 6, 7, 8, 9, 13, 14, 15, 25, 26, 27],
  9: [10, 11, 12, 16, 17, 18, 19, 20, 21, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40],
 10: [22, 23, 24, 35, 36, 37, 41, 42, 43, 44, 45, 46]
};

// 2. –í—ã–±–∏—Ä–∞–µ–º 12 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (–Ω–æ–º–µ—Ä + —É–≥–æ–ª) –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
function selectUniqueCombinations(groupNumbers, count) {
  const selected = [];
  while (selected.length < count) {
    const number = jsPsych.randomization.sampleWithReplacement(groupNumbers, 1)[0];
    const usedAngles = selected.filter(s => s.number === number).map(s => s.angle);
    const availableAngles = angles.filter(a => !usedAngles.includes(a));
    if (availableAngles.length === 0) continue;

    const angle = jsPsych.randomization.sampleWithoutReplacement(availableAngles, 1)[0];
    selected.push({ number, angle });
  }
  return selected;
}

// 3. –°–æ–±–∏—Ä–∞–µ–º 36 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (12 –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã)
let combinations = [];
combinations = combinations.concat(selectUniqueCombinations(fragmentGroups[8], trialsPerGroup));
combinations = combinations.concat(selectUniqueCombinations(fragmentGroups[9], trialsPerGroup));
combinations = combinations.concat(selectUniqueCombinations(fragmentGroups[10], trialsPerGroup));

// 4. –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω–µ –∏–∑ –Ω–∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ª–æ–≤–∏–Ω–µ ‚Äî "_R"
let labeled = combinations.map(c => ({ ...c, correct: true }));
labeled = jsPsych.randomization.shuffle(labeled);
labeled = labeled.map((c, i) => {
  if (i >= correctCount) c.correct = false;
  return c;
});

// üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ—â—ë —Ä–∞–∑ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è correct
labeled = jsPsych.randomization.shuffle(labeled);


// 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
const selected = labeled.map(c => {
  const suffix = c.correct ? '.jpg' : '_R.jpg';
  return `${c.number}_${c.angle}${suffix}`;
});



// –®–∞–≥ 5. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
const shuffled = jsPsych.randomization.shuffle(selected);



// 3) –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const preload = {
  type: jsPsychPreload,
  images: shuffled.map(fn => `Rotation_pictures/${fn}`)
};


// 4) –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
const instructions = {
  type: jsPsychInstructions,
  pages: [
    `<p>–í–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ 30 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–≤—É–º—è –æ–±—ä–µ–∫—Ç–∞–º–∏.</p>
     <p>–ù–∞–∂–∏–º–∞–π—Ç–µ <strong>"–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ"</strong>, –µ—Å–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ ‚Äî –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–∞,  
     –∏–ª–∏ <strong>"–†–∞–∑–Ω—ã–µ"</strong>, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è.</p>
     <p>–ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª–µ–µ¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.</p>`
  ],
  show_clickable_nav: true,
  button_label_next: '–î–∞–ª–µ–µ',
  allow_backward: false
};

// 5) –°–æ–∑–¥–∞—ë–º_trials –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const image_trials = shuffled.map(filename => {
  const correct = filename.endsWith('_R.jpg') ? '–†–∞–∑–Ω—ã–µ' : '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ';
  return {
    type: jsPsychImageButtonResponse,
    stimulus: `Rotation_pictures/${filename}`,
    choices: ['–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ', '–†–∞–∑–Ω—ã–µ'],
    prompt: "<p>–í—ã–±–µ—Ä–∏—Ç–µ, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</p>",
    button_html: (choice) => {
      const bg = choice === '–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ' ? '#4CAF50' : '#F44336'; 
      return `<button class="jspsych-btn" style="background-color: ${bg}; color: white; margin: 10px; padding: 10px 20px;">${choice}</button>`;
    },
    data: {
      filename: filename,
      correct: correct
    },
    on_finish: function(data) {
      const trial = jsPsych.getCurrentTrial();
      const choices = trial?.choices ?? [];
      if (data.response !== null && data.response !== undefined && data.response >= 0 && data.response < choices.length) {
        data.response_label = choices[data.response];
        data.correct_trial = (data.response_label === data.correct);
      } else {
        data.response_label = null;
        data.correct_trial = false;
      }
    }
  };
});




// 6) –ë–ª–æ–∫ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
// –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω.
const feedback = {
  type: jsPsychHtmlButtonResponse,
  choices: ['–î–∞–ª–µ–µ'],
  stimulus: function(){
    const last = jsPsych.data.get().last(1).values()[0];
    return last.correct_trial
      ? '<p style="color:green">–ü—Ä–∞–≤–∏–ª—å–Ω–æ!</p>'
      : `<p style="color:red">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${last.correct}</p>`;
  }
};

// 7) –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const debrief = {
  type: jsPsychHtmlButtonResponse,
  choices: ['–ó–∞–≤–µ—Ä—à–∏—Ç—å'],
  stimulus: function() {
    const all = jsPsych.data.get().filter({ trial_type: 'image-button-response' });
    const n_correct = all.filter({ correct_trial: true }).count();
    const n_total = all.count();
    return `<h2>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
            <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${n_correct} –∏–∑ ${n_total}</p>
            <p>–ü—Ä–æ—Ü–µ–Ω—Ç: ${Math.round((n_correct/n_total)*100)}%</p>`
  }
};

// 8) –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–π–º–ª–∞–π–Ω
const timeline = [preload, instructions];
shuffled.forEach((_, i) => {
  timeline.push(image_trials[i]);
  // –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å feedback ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
  // timeline.push(feedback);
});
timeline.push(debrief);

// 9) –ó–∞–ø—É—Å–∫
jsPsych.run(timeline);
